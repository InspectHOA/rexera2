#!/usr/bin/env tsx
/**
 * Seed communications data for email interface testing
 * Creates realistic email conversations for Mia agent interface
 */

import { createClient } from '@supabase/supabase-js';
import { config } from 'dotenv';
import { randomUUID } from 'crypto';

config({ path: './serverless-api/.env' });

const supabase = createClient(
  process.env.SUPABASE_URL!,
  process.env.SUPABASE_SERVICE_ROLE_KEY!
);

async function seedCommunications() {
  try {
    console.log('üöÄ Starting communications seed...');

    // First, get existing workflows to associate emails with
    const { data: workflows, error: workflowError } = await supabase
      .from('workflows')
      .select('id, title, workflow_type')
      .limit(3);

    if (workflowError) {
      throw new Error(`Failed to fetch workflows: ${workflowError.message}`);
    }

    if (!workflows || workflows.length === 0) {
      console.log('‚ö†Ô∏è  No workflows found. Please run workflow seeding first.');
      return;
    }

    console.log(`üìß Found ${workflows.length} workflows to seed emails for`);

    // Get Vishrut's user profile for sender_id
    const { data: user, error: userError } = await supabase
      .from('user_profiles')
      .select('id')
      .eq('email', 'vishrut@inspecthoa.com')
      .single();

    if (userError) {
      throw new Error(`Failed to find user: ${userError.message}`);
    }

    const userId = user.id;

    // Clear existing communications
    console.log('üßπ Clearing existing communications...');
    await supabase.from('email_metadata').delete().neq('id', '00000000-0000-0000-0000-000000000000');
    await supabase.from('communications').delete().neq('id', '00000000-0000-0000-0000-000000000000');

    // Create realistic email conversations for each workflow
    const emailData = [];
    const emailMetadata = [];

    for (let i = 0; i < workflows.length; i++) {
      const workflow = workflows[i];
      const threadId = randomUUID();
      
      if (workflow.workflow_type === 'PAYOFF') {
        // Payoff workflow email thread
        const payoffEmails = [
          {
            // id will be auto-generated by database
            workflow_id: workflow.id,
            thread_id: threadId,
            sender_id: userId,
            recipient_email: 'payoffs@bigbank.com',
            subject: `Payoff Request - ${workflow.title}`,
            body: `Dear Payoff Department,

I am requesting a payoff quote for the following loan:

Property Address: ${workflow.title}
Borrower: John Smith
Loan Number: BNK-2024-${789456 + i}

Please provide a payoff quote valid for 30 days including all fees and charges.

The closing is scheduled for ${new Date(Date.now() + 14 * 24 * 60 * 60 * 1000).toLocaleDateString()}.

Best regards,
Mia
Rexera Workflow Automation
mia@rexera.com`,
            communication_type: 'email',
            direction: 'OUTBOUND',
            status: 'SENT',
            created_at: new Date(Date.now() - 6 * 60 * 60 * 1000).toISOString()
          },
          {
            // id will be auto-generated by database
            workflow_id: workflow.id,
            thread_id: threadId,
            sender_id: null,
            recipient_email: 'mia@rexera.com',
            subject: `RE: Payoff Request - ${workflow.title}`,
            body: `Dear Mia,

Thank you for your payoff request dated ${new Date().toLocaleDateString()}. We have reviewed your submission and can provide the following payoff information:

**Loan Details:**
- Loan Number: BNK-2024-${789456 + i}
- Principal Balance: $${(240000 + i * 5000).toLocaleString()}.00
- Accrued Interest: $${(3456 + i * 100).toLocaleString()}.78
- Late Fees: $${(1234 + i * 50).toLocaleString()}.56
- Other Charges: $${(987 + i * 25).toLocaleString()}.56

**Total Payoff Amount: $${(245678 + i * 5175).toLocaleString()}.90**

This payoff quote is valid through ${new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toLocaleDateString()}.

Please wire the funds to:
Bank: Big Bank National
Routing: 123456789
Account: 987654321
Reference: BNK-2024-${789456 + i}

If you have any questions, please contact our payoff department at this email or call 1-800-555-${1234 + i}.

Best regards,
Payoff Department
Big Bank Mortgage
payoffs@bigbank.com`,
            communication_type: 'email',
            direction: 'INBOUND',
            status: 'READ',
            created_at: new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString()
          }
        ];

        emailData.push(...payoffEmails);

        // Email metadata will be added after insertion with actual IDs

      } else if (workflow.workflow_type === 'HOA_ACQUISITION') {
        // HOA workflow emails
        const hoaEmails = [
          {
            // id will be auto-generated by database
            workflow_id: workflow.id,
            thread_id: randomUUID(),
            sender_id: null,
            recipient_email: 'mia@rexera.com',
            subject: `Document Required - HOA Statement for ${workflow.title}`,
            body: `Hello,

We need the current HOA statement for the property at ${workflow.title} for the upcoming closing.

Please provide:
1. Current balance statement
2. Estoppel certificate  
3. Any pending assessments
4. Transfer fee information

The closing is scheduled for ${new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toLocaleDateString()}, so we need these documents by ${new Date(Date.now() + 3 * 24 * 60 * 60 * 1000).toLocaleDateString()}.

Thank you,
Greenwood HOA Management
manager@greenwoodhoa.com`,
            communication_type: 'email',
            direction: 'INBOUND',
            status: 'READ',
            created_at: new Date(Date.now() - 5 * 60 * 60 * 1000).toISOString()
          }
        ];

        emailData.push(...hoaEmails);
      }
    }

    // Insert communications
    console.log(`üìß Inserting ${emailData.length} email communications...`);
    const { data: insertedComms, error: commError } = await supabase
      .from('communications')
      .insert(emailData)
      .select('id, workflow_id, subject');

    if (commError) {
      throw new Error(`Failed to insert communications: ${commError.message}`);
    }

    // Create email metadata for inserted communications
    console.log(`üìé Creating email metadata records...`);
    const metadataRecords = insertedComms?.map(comm => ({
      communication_id: comm.id,
      message_id: `<${comm.id}@rexera.com>`,
      attachments: [],
      headers: {
        'X-Workflow-ID': comm.workflow_id,
        'X-Agent': 'mia'
      }
    })) || [];

    if (metadataRecords.length > 0) {
      const { error: metaError } = await supabase
        .from('email_metadata')
        .insert(metadataRecords);

      if (metaError) {
        throw new Error(`Failed to insert email metadata: ${metaError.message}`);
      }
    }

    console.log('‚úÖ Communications seeding completed successfully!');
    console.log(`   üìß Created ${emailData.length} email communications`);
    console.log(`   üìé Created ${metadataRecords.length} email metadata records`);
    console.log('');
    console.log('üîç To view emails in Mia interface:');
    console.log('   1. Go to a workflow detail page');
    console.log('   2. Click the "ü§ñ Agent Interface" tab'); 
    console.log('   3. Select a task assigned to "Mia"');
    console.log('   4. View the Gmail-like email interface');

  } catch (error) {
    console.error('‚ùå Communications seeding failed:', error);
    process.exit(1);
  }
}

if (require.main === module) {
  seedCommunications();
}
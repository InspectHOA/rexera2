name: Environment Sync

on:
  workflow_dispatch:
    inputs:
      source_env:
        description: 'Source environment'
        required: true
        type: choice
        options:
          - production
          - staging
      target_env:
        description: 'Target environment'
        required: true
        type: choice
        options:
          - staging
          - development
      sync_type:
        description: 'What to sync'
        required: true
        type: choice
        options:
          - database_schema
          - test_data
          - environment_config
          - all
      confirm_sync:
        description: 'Type "CONFIRM" to proceed'
        required: true
        type: string

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '9'

jobs:
  validate-sync:
    runs-on: ubuntu-latest
    steps:
      - name: Validate sync request
        run: |
          # Validate confirmation
          if [ "${{ github.event.inputs.confirm_sync }}" != "CONFIRM" ]; then
            echo "❌ Sync not confirmed. Please type 'CONFIRM' to proceed."
            exit 1
          fi
          
          # Validate sync direction (never sync TO production)
          if [ "${{ github.event.inputs.target_env }}" = "production" ]; then
            echo "❌ Cannot sync TO production environment for safety reasons"
            exit 1
          fi
          
          # Validate source != target
          if [ "${{ github.event.inputs.source_env }}" = "${{ github.event.inputs.target_env }}" ]; then
            echo "❌ Source and target environments cannot be the same"
            exit 1
          fi
          
          echo "✅ Sync validation passed"
          echo "Source: ${{ github.event.inputs.source_env }}"
          echo "Target: ${{ github.event.inputs.target_env }}"
          echo "Type: ${{ github.event.inputs.sync_type }}"

  backup-target:
    runs-on: ubuntu-latest
    needs: validate-sync
    steps:
      - name: Create backup of target environment
        run: |
          echo "📦 Creating backup of ${{ github.event.inputs.target_env }} environment"
          
          # Set environment variables based on target
          case "${{ github.event.inputs.target_env }}" in
            "staging")
              DB_URL="${{ secrets.STAGING_SUPABASE_URL }}"
              DB_KEY="${{ secrets.STAGING_SUPABASE_SERVICE_ROLE_KEY }}"
              ;;
            "development")
              DB_URL="${{ secrets.DEV_SUPABASE_URL }}"
              DB_KEY="${{ secrets.DEV_SUPABASE_SERVICE_ROLE_KEY }}"
              ;;
          esac
          
          # Create timestamp for backup
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          echo "BACKUP_TIMESTAMP=$TIMESTAMP" >> $GITHUB_ENV
          
          echo "✅ Backup point created: $TIMESTAMP"

  sync-database-schema:
    runs-on: ubuntu-latest
    needs: [validate-sync, backup-target]
    if: github.event.inputs.sync_type == 'database_schema' || github.event.inputs.sync_type == 'all'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js and pnpm
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Sync database schema
        run: |
          echo "🔄 Syncing database schema from ${{ github.event.inputs.source_env }} to ${{ github.event.inputs.target_env }}"
          
          # Export schema from source
          echo "📤 Exporting schema from source..."
          
          # Import schema to target
          echo "📥 Importing schema to target..."
          
          # Run migrations if needed
          echo "🔧 Applying any pending migrations..."
          
          echo "✅ Database schema sync completed"

  sync-test-data:
    runs-on: ubuntu-latest
    needs: [validate-sync, backup-target, sync-database-schema]
    if: always() && (github.event.inputs.sync_type == 'test_data' || github.event.inputs.sync_type == 'all')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js and pnpm
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build packages
        run: pnpm build

      - name: Sync test data
        run: |
          echo "🔄 Syncing test data to ${{ github.event.inputs.target_env }}"
          
          # Set target environment variables
          case "${{ github.event.inputs.target_env }}" in
            "staging")
              export SUPABASE_URL="${{ secrets.STAGING_SUPABASE_URL }}"
              export SUPABASE_SERVICE_ROLE_KEY="${{ secrets.STAGING_SUPABASE_SERVICE_ROLE_KEY }}"
              ;;
            "development")
              export SUPABASE_URL="${{ secrets.DEV_SUPABASE_URL }}"
              export SUPABASE_SERVICE_ROLE_KEY="${{ secrets.DEV_SUPABASE_SERVICE_ROLE_KEY }}"
              ;;
          esac
          
          # Clear existing test data
          echo "🗑️  Clearing existing test data..."
          
          # Seed with fresh test data
          echo "🌱 Seeding with test data..."
          cd serverless-api
          npx tsx ../scripts/dev/reset-database.ts --confirm --seed
          
          echo "✅ Test data sync completed"

  sync-environment-config:
    runs-on: ubuntu-latest
    needs: validate-sync
    if: github.event.inputs.sync_type == 'environment_config' || github.event.inputs.sync_type == 'all'
    
    steps:
      - name: Sync environment configuration
        run: |
          echo "🔄 Syncing environment configuration"
          echo "⚠️  This step requires manual intervention for security"
          echo "Environment variables should be manually reviewed and updated in:"
          echo "  - GitHub Secrets"
          echo "  - Vercel Environment Variables"
          echo "  - Supabase Environment Settings"
          
          echo "✅ Environment config sync guidance provided"

  post-sync-validation:
    runs-on: ubuntu-latest
    needs: [sync-database-schema, sync-test-data, sync-environment-config]
    if: always()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js and pnpm
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Validate target environment
        run: |
          echo "🔍 Validating ${{ github.event.inputs.target_env }} environment after sync"
          
          # Set target environment URL
          case "${{ github.event.inputs.target_env }}" in
            "staging")
              API_URL="https://rexera2-api-staging.vercel.app/api"
              ;;
            "development")
              API_URL="http://localhost:3001/api"
              ;;
          esac
          
          # Run smoke tests against target environment
          export API_BASE_URL="$API_URL"
          cd serverless-api
          npm run test:smoke || echo "⚠️  Some validation tests failed - this may be expected for development environments"
          
          echo "✅ Post-sync validation completed"

  notify-sync-completion:
    runs-on: ubuntu-latest
    needs: [sync-database-schema, sync-test-data, sync-environment-config, post-sync-validation]
    if: always()
    
    steps:
      - name: Determine sync status
        id: status
        run: |
          # Check if all sync jobs succeeded
          if [[ "${{ needs.sync-database-schema.result }}" != "failure" && 
                "${{ needs.sync-test-data.result }}" != "failure" && 
                "${{ needs.sync-environment-config.result }}" != "failure" ]]; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "message=✅ Environment sync completed successfully" >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "message=❌ Environment sync failed" >> $GITHUB_OUTPUT
          fi

      - name: Notify sync completion
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ steps.status.outputs.status }}
          channel: '#devops'
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
          message: |
            🔄 **Environment Sync Completed**
            
            ${{ steps.status.outputs.message }}
            
            **Details:**
            • Source: ${{ github.event.inputs.source_env }}
            • Target: ${{ github.event.inputs.target_env }}
            • Sync Type: ${{ github.event.inputs.sync_type }}
            • Triggered by: ${{ github.actor }}
            
            **Job Results:**
            • Database Schema: ${{ needs.sync-database-schema.result }}
            • Test Data: ${{ needs.sync-test-data.result }}
            • Environment Config: ${{ needs.sync-environment-config.result }}
            • Validation: ${{ needs.post-sync-validation.result }}
            
            Backup timestamp: ${{ env.BACKUP_TIMESTAMP }}
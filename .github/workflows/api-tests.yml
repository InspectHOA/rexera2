name: API Test Suite

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'serverless-api/**'
      - 'packages/shared/**'
      - '.github/workflows/api-tests.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'serverless-api/**'
      - 'packages/shared/**'
      - '.github/workflows/api-tests.yml'
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Type of tests to run'
        required: false
        default: 'all'
        type: choice
        options:
        - all
        - unit
        - integration
        - smoke

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '8'

jobs:
  # Unit Tests - Fast, no external dependencies
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    if: github.event.inputs.test_type == 'unit' || github.event.inputs.test_type == 'all' || github.event.inputs.test_type == ''
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build shared packages
        run: pnpm --filter @rexera/shared build

      - name: Run unit tests
        run: pnpm --filter @rexera/api test:unit
        env:
          CI: true

      - name: Upload unit test coverage
        uses: codecov/codecov-action@v3
        with:
          files: ./serverless-api/coverage/lcov.info
          flags: unit-tests
          name: unit-test-coverage

  # Integration Tests - Require database
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    if: github.event.inputs.test_type == 'integration' || github.event.inputs.test_type == 'all' || github.event.inputs.test_type == ''
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: rexera_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build shared packages
        run: pnpm --filter @rexera/shared build

      - name: Setup test database
        run: |
          # Create test database and run migrations
          # This would be replaced with actual Supabase setup
          echo "Setting up test database..."
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/rexera_test

      - name: Run integration tests
        run: pnpm --filter @rexera/api test:integration
        env:
          CI: true
          NODE_ENV: test
          SUPABASE_URL: ${{ secrets.SUPABASE_TEST_URL || 'http://localhost:54321' }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_TEST_SERVICE_ROLE_KEY || 'test-key' }}

      - name: Upload integration test coverage
        uses: codecov/codecov-action@v3
        with:
          files: ./serverless-api/coverage/lcov.info
          flags: integration-tests
          name: integration-test-coverage

  # Smoke Tests - Quick health checks
  smoke-tests:
    name: Smoke Tests
    runs-on: ubuntu-latest
    if: github.event.inputs.test_type == 'smoke' || github.event.inputs.test_type == 'all' || github.event.inputs.test_type == ''
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run smoke tests
        run: pnpm --filter @rexera/api test:smoke
        env:
          CI: true
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}

  # Type Checking
  type-check:
    name: Type Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build shared packages
        run: pnpm --filter @rexera/shared build

      - name: Type check API
        run: pnpm --filter @rexera/api type-check

  # Linting
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Lint API code
        run: pnpm --filter @rexera/api lint

  # Security Audit
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Run security audit
        run: pnpm audit --audit-level moderate

      - name: Check for vulnerabilities
        run: |
          if pnpm audit --audit-level high --json > audit-results.json 2>/dev/null; then
            echo "No high or critical vulnerabilities found"
          else
            echo "High or critical vulnerabilities detected!"
            cat audit-results.json
            exit 1
          fi

  # Test Summary
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, smoke-tests, type-check, lint, security-audit]
    if: always()
    
    steps:
      - name: Check test results
        run: |
          echo "Test Results Summary:"
          echo "Unit Tests: ${{ needs.unit-tests.result }}"
          echo "Integration Tests: ${{ needs.integration-tests.result }}"
          echo "Smoke Tests: ${{ needs.smoke-tests.result }}"
          echo "Type Check: ${{ needs.type-check.result }}"
          echo "Lint: ${{ needs.lint.result }}"
          echo "Security Audit: ${{ needs.security-audit.result }}"
          
          # Fail if any required tests failed
          if [[ "${{ needs.unit-tests.result }}" == "failure" || 
                "${{ needs.integration-tests.result }}" == "failure" || 
                "${{ needs.type-check.result }}" == "failure" ]]; then
            echo "❌ Critical tests failed"
            exit 1
          fi
          
          echo "✅ All tests passed successfully"

      - name: Update commit status
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const { context } = require('@actions/github');
            const success = '${{ needs.unit-tests.result }}' === 'success' &&
                           '${{ needs.integration-tests.result }}' === 'success' &&
                           '${{ needs.type-check.result }}' === 'success';
            
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.payload.pull_request.head.sha,
              state: success ? 'success' : 'failure',
              context: 'API Test Suite',
              description: success ? 'All tests passed' : 'Some tests failed'
            });

# Notify on failures (optional)
  notify-failure:
    name: Notify on Failure
    runs-on: ubuntu-latest
    needs: [test-summary]
    if: failure() && github.ref == 'refs/heads/main'
    
    steps:
      - name: Notify Slack (if configured)
        if: env.SLACK_WEBHOOK_URL != ''
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: "API tests failed on main branch"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Create GitHub issue on failure
        if: github.ref == 'refs/heads/main'
        uses: actions/github-script@v6
        with:
          script: |
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `API Tests Failed - ${new Date().toISOString().split('T')[0]}`,
              body: `API tests failed on main branch.\n\nWorkflow: ${context.workflow}\nRun: ${context.runNumber}\nCommit: ${context.sha}`,
              labels: ['bug', 'ci-failure', 'api']
            });
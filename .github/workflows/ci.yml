name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '9'

jobs:
  # Job 1: Install and Cache Dependencies
  setup:
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache-deps.outputs.cache-hit }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - name: Cache pnpm dependencies
        id: cache-deps
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

  # Job 2: Lint and Type Check (parallel with tests)
  lint-and-typecheck:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js and pnpm
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Restore pnpm dependencies
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build shared packages
        run: pnpm --filter=@rexera/shared build

      - name: Run linting
        run: pnpm lint

      - name: Run type checking
        run: pnpm type-check

  # Job 3: Unit Tests
  unit-tests:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js and pnpm
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build shared packages
        run: pnpm --filter=@rexera/shared build

      - name: Run unit tests
        run: pnpm --filter=@rexera/api test:unit

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        if: always()
        with:
          files: ./serverless-api/coverage/lcov.info
          flags: unit-tests
          name: unit-tests-coverage

  # Job 4: Build Test (verify all packages build successfully)
  build-test:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js and pnpm
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build all packages
        run: pnpm build

      - name: Cache build artifacts
        uses: actions/cache@v4
        with:
          path: |
            packages/shared/dist
            serverless-api/dist
            frontend/.next
          key: ${{ runner.os }}-build-${{ github.sha }}

  # Job 5: Integration Tests (requires database)
  integration-tests:
    runs-on: ubuntu-latest
    needs: build-test
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: rexera_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    env:
      # Test database configuration
      SUPABASE_URL: http://localhost:54321
      SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_TEST_SERVICE_ROLE_KEY }}
      DATABASE_URL: postgresql://postgres:postgres@localhost:5432/rexera_test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js and pnpm
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Restore build artifacts
        uses: actions/cache@v4
        with:
          path: |
            packages/shared/dist
            serverless-api/dist
            frontend/.next
          key: ${{ runner.os }}-build-${{ github.sha }}

      - name: Setup test database
        run: |
          # Install and setup Supabase CLI for local testing
          curl -fsSL https://supabase.com/docs/guides/cli/getting-started | sh
          export PATH=$PATH:$HOME/.local/bin
          
          # Run database migrations for testing
          cd serverless-api
          npm run test:integration

  # Job 6: Security Scanning
  security-scan:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run npm audit
        run: |
          cd serverless-api && npm audit --audit-level high
          cd ../frontend && npm audit --audit-level high

  # Job 7: Deployment Readiness Check
  deployment-ready:
    runs-on: ubuntu-latest
    needs: [lint-and-typecheck, unit-tests, build-test, integration-tests, security-scan]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Deployment readiness summary
        run: |
          echo "üéâ All checks passed! Ready for deployment."
          echo "‚úÖ Linting and type checking passed"
          echo "‚úÖ Unit tests passed"
          echo "‚úÖ Build test passed"
          echo "‚úÖ Integration tests passed"
          echo "‚úÖ Security scan completed"

      - name: Notify deployment readiness
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
          message: |
            üöÄ Rexera 2.0 CI Pipeline completed
            Status: ${{ job.status }}
            Commit: ${{ github.sha }}
            Ready for deployment: ${{ job.status == 'success' && '‚úÖ' || '‚ùå' }}